# bash_bst: bst tool bash extend
# environment:
# BST_TOOL_VERBOSE: debug output
# BST_TOOL_GET_HUGE: bstrget file size limit, if defined, file size large than this will be prompted, default is 1 MB

# global variable
# we can NOT pass these as recursive function parameters, 
# as shell function can NOT pass modification back to callee.
#
# cover flag (1:no once 2:no all 3:yes once 4:yes all)
g_cover_flag=1
# size limit flag (1:no once 2:no all 3:yes once 4:yes all)
g_limit_flag=1
g_size_limit=1 # MB

# $1: remote path
#
# return value
# 0: user allow and delete existing remote file
# 1: user disallow and do nothing
bsttool_duplicate_warning()
{
    local resp
    echo -n "remote file exist, do you want to cover it? (n/y) "
    read resp
    case "$resp" in 
        "y"|"Y")
            # remove remote reource first
            bst_tool delete "$1"
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# $1: local path
#
# return value
# 0: user allow and delete existing local file
# 1: user disallow and do nothing
bsttool_existence_warning()
{
    local resp
    echo -n "local file exist, do you want to cover it? (n/y) "
    read resp
    case "$resp" in 
        "y"|"Y")
            # remove local reource first
            rm "$1"
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# return value
# 0: invalid input
# 1: no once
# 2: no all
# 3: yes once
# 4: yes all
bsttool_duplicate_dir_warning()
{
    local resp
    echo -n "dest file/dir exist, do you want to cover it? (n/N/y/Y) "
    read resp
    #echo "$resp"
    case "$resp" in 
        "n")
            return 1
            ;;
        "N")
            return 2
            ;;
        "y")
            return 3
            ;;
        "Y")
            return 4
            ;;
        *)
            return 0
            ;;
    esac
}

# return value
# 0: invalid input
# 1: no once
# 2: no all
# 3: yes once
# 4: yes all
bsttool_huge_file_warning()
{
    local resp
    echo -n "do you want to continue download this large file? (n/N/y/Y) "
    read resp
    case "$resp" in 
        "n")
            return 1
            ;;
        "N")
            return 2
            ;;
        "y")
            return 3
            ;;
        "Y")
            return 4
            ;;
        *)
            return 0
            ;;
    esac
}

# $1: dest path
#
# return value:
# 0: not exist
# 1: file exist
# 2: dir exist but empty
# 3: dir exist and not empty
bsttool_query_path()
{
    local remote=$1
    local res=$(bst_tool ls "$remote")
    local line=$(echo "$res" | sed -n '2p')
    local str=${line/"total size"//}
    local download="/tmp/bst.tmp"
    local ret=0
    #echo "remote: $remote, res: $res, line: $line, str: $str"
    if [ "$str" != "$line" ]; then 
        # normal return
        ret=$(echo "$line" | awk '{print $NF}')
        if [ $ret -eq 0 ]; then 
            ret=2
        elif [ $ret -gt 1 ]; then 
            # a dir
            ret=3 
            # at this point, we are NOT sure there is no file with same name exist, 
            # as bst_tool ls list directory with preference than file, 
            # so here we need a download try...
            echo "dir exist, try download to check existence of file with same name"
        else # size=1
            ret=3
            # note here we can NOT using type file/dir to determine, 
            # for example, there is a path /tmp/tmp pointed to a file
            # when we ls /tmp, it report one item named 'tmp' with type file,
            # but actually it is a dir.
            # so here we use another way to determine, that is, download it, 
            # you can NOT download a dir.
            echo "dir or file exist, try download to check"
        fi

        if [ $ret -eq 3 ]; then 
            rm "$download" > /dev/null 2>&1 # otherwise bst_tool will fail
            line=$(bst_tool get "$remote" "$download" | sed -n '2p')
            if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
                echo "download: $line"
            fi

            #if [[ "$line" =~ "download success" ]]; then # always fail
            str=${line/"download success"//}
            if [ "$str" != "$line" ]; then # string replace changed: download success
                # is a file
                ret=1
            else 
                # is a dir
                ret=3
            fi
        fi
    else
        # server response error, no such path
        if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
            echo "no such path: $remote"
        fi

        ret=0
    fi

    if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
        echo "ls=$ret"
    fi

    return $ret
}

# $1: local file path
# $2: remote file path (optional)
bsttool_replace ()
{
    if [ $# -lt 1 ]; then 
        echo "Usage: bstput local [remote]"
        return 1
    fi

    local local=$1
    local remote="/"
    if [ $# -gt 1 ]; then 
        remote=$2
    fi

    # first check dest existence
    #local download="/tmp/bst.tmp"
    local name=${local##*/} # remove path part, want name only
    if [ -z "$name" ]; then 
        name="$local"
    fi

    local path=$remote/$name
    if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
        echo "path=$path"
    fi

    bsttool_query_path "$remote"
    local res=$?
    case $res in
        0)
            # not exist
            echo "dir/file not exist, start uploading"
            ;;
        1)
            # file exist
            bsttool_duplicate_warning "$remote"
            if [ $? -ne 0 ]; then 
                return 1
            fi
            ;;
        2)
            # empty dir exist
            echo "dir exist but empty, start uploading"
            ;;
        3)
            # dir exist and not empty
            # try file again
            echo "dir exist, try file"
            bsttool_query_path "$path"
            res=$?
            if [ $res -eq 1 ]; then 
                # dest file exist, warning...
                bsttool_duplicate_warning "$path"
                if [ $? -ne 0 ]; then 
                    return 1
                fi
            fi
            ;;
        *)
            echo "should not reach here !!"
            return 1
            ;;
    esac

    bst_tool put "$local" "$remote"
    return 0
}

# $1: remote file path
# $2: local file path (optional)
bsttool_fetch ()
{
    if [ $# -lt 1 ]; then 
        echo "Usage: bstget remote [local]"
        return 1
    fi

    local remote=$1
    local name=${remote##*/} # remove path part, want name only
    if [ -z "$name" ]; then 
        name="$remote"
    fi

    local local="./"
    if [ $# -gt 1 ]; then 
        local=$2
    fi

    # check dest existence
    if [ -e "$local" ]; then 
        if [ -d "$local" ]; then 
            # for dir, test sub file existence
            if [ -e "$local/$name" -a ! -d "$local/$name" ]; then 
                # dest file exist, warning...
                bsttool_existence_warning "$local/$name"
                if [ $? -ne 0 ]; then 
                    return 1
                fi
            fi
        else 
        #elif [ -f "$local" ]; then
            # dest file exist, warning...
            bsttool_existence_warning "$local"
            if [ $? -ne 0 ]; then 
                return 1
            fi
        fi
    fi

    if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
        echo "path=$local"
    fi

    bst_tool get "$remote" "$local"
    return 0
}

# $1: remote path
# $2: depth
bsttool_list_recur ()
{
    local remote=$1
    local depth=$(($2+1))
    local res=$(bst_tool ls "$remote")
    local line=$(echo "$res" | sed -n '2p')
    local str=${line/"total size"//}
    local ret=0
    if [ "$str" != "$line" ]; then 
        # normal return
        ret=$(echo "$line" | awk '{print $NF}')
    else
        # server response error
        ret=0
    fi

    # 6: skip header
    local max=$(($ret + 6 - 1))
    local fid=""
    local size="" # has K/M/G postfix
    local type=""
    local name=""
    echo "$remote [$depth-$ret]:"
    for n in $(seq 6 $max)
    do
        # why sed -n "$np" don't work ?
        line=$(echo "$res" | sed -n "$n"'p')
        # row: fid, user, size, timestamp, type, name
        # if size is empty (for dir, all spaces), using 0 instead
        # do awk twice to remove redundant space
        #
        # add quotation for assignment is important, otherwise we will get errors on bracket (etc) in value
        eval $(echo "$line" | awk -F'│' '{printf ("%s\t%s\t%s\t%s\n", $2, match($4, /[a-zA-Z0-9.]+/)?$4:"0", $6, $7)}' | awk '{printf ("fid=\"%s\";size=\"%s\";type=\"%s\";name=\"%s\";\n", $1,$2,$3,$4)}')
        # echo "$line" | awk -F'│' 'BEGIN {print FS} {print NF, $2, $4, $6, $7}'
        if [ "$type" == "dir" ]; then 
            #echo -e "$depth:\t$fid,\t$name"

            # do for sub dirs
            local path=""
            #echo "last char: ${remote:0-1}"
            if [ ${remote:0-1} == "/" ]; then 
                path="$remote$name"
            else
                path="$remote/$name"
            fi

            bsttool_list_recur "$path" $depth
            #echo ""
        else
            #echo -e "$depth:\t$fid,\t$size,\t$name"
            echo -e "$fid:\t$size,\t$name"
        fi
    done

    return 0
}

# $1: remote path
bsttool_list_all ()
{
    local remote="/"
    if [ $# -gt 0 ]; then 
        remote=$1
    fi

    bsttool_list_recur "$remote" 0 
}

# $1: remote path
# $2: local path
# $3: depth
bsttool_get_recur ()
{
    local remote=$1
    local local=$2
    local depth=$(($3+1))

    local res=$(bst_tool ls "$remote")
    local line=$(echo "$res" | sed -n '2p')
    local str=${line/"total size"//}
    local ret=0
    if [ "$str" != "$line" ]; then 
        # normal return
        ret=$(echo "$line" | awk '{print $NF}')
    else
        # server response error
        ret=0
    fi

    # 6: skip header
    local max=$(($ret + 6 - 1))
    local fid=""
    local size="" # has K/M/G postfix
    local type=""
    local name=""
    local path=""
    local filesize=0
    echo "$remote [$depth-$ret]:"
    for n in $(seq 6 $max)
    do
        # why sed -n "$np" don't work ?
        line=$(echo "$res" | sed -n "$n"'p')
        # row: fid, user, size, timestamp, type, name
        # if size is empty (for dir, all spaces), using 0 instead
        # do awk twice to remove redundant space
        eval $(echo "$line" | awk -F'│' '{printf ("%s\t%s\t%s\t%s\n", $2, match($4, /[a-zA-Z0-9.]+/)?$4:"0", $6, $7)}' | awk '{printf ("fid=\"%s\";size=\"%s\";type=\"%s\";name=\"%s\";\n", $1,$2,$3,$4)}')
        if [ "$type" == "dir" ]; then 
            if [ -d "$name" ]; then 
                echo "dir exist: $name"
                if [ $g_cover_flag -eq 1 -o $g_cover_flag -eq 3 ]; then 
                    bsttool_duplicate_dir_warning
                    g_cover_flag=$?
                fi

                # do NOT rm dirs even if user select cover it !
                # just merge files into it ..
                #
                # if not yes once or all, then nothing to do
                if [ $g_cover_flag -ne 3 -a $g_cover_flag -ne 4 ]; then 
                    echo "nothing to do"
                    continue
                fi
            else
                mkdir "$name"
            fi

            cd "$name"
            if [ $? -eq 0 ]; then 
                # only recursive download when cd success
                # enterprise netdisk allows dir & file have same name in a subdir
                # but linux choked on that...
                #
                # do for sub dirs
                #echo "last char: ${remote:0-1}"
                if [ ${remote:0-1} == "/" ]; then 
                    path="$remote$name"
                else
                    path="$remote/$name"
                fi

                bsttool_get_recur "$path" "$name" $depth
                cd ..
            fi
        else
            echo -e "$fid:\t$size,\t$name"
            # contains KB?
            local kfactor=${size/"KB"//}
            if [ "$kfactor" != "$size" ]; then
                kfactor=1024
            else
                kfactor=1
            fi

            # contains MB?
            local mfactor=${size/"MB"//}
            if [ "$mfactor" != "$size" ]; then
                mfactor=$((1024*1024))
            else
                mfactor=1
            fi

            # contains GB?
            local gfactor=${size/"GB"//}
            if [ "$gfactor" != "$size" ]; then
                gfactor=$((1024*1024*1024))
            else
                gfactor=1
            fi

            # should we support TB?
            #filesize=$(awk -v val="$size" -v k="$kfactor" -v m="$mfactor" -v g="$gfactor" 'BEGIN{ print val; print strtonum(val); printf ("%d", strtonum(val)*k*m*g) }')
            filesize=$(awk -v val="$size" -v k="$kfactor" -v m="$mfactor" -v g="$gfactor" 'BEGIN{ printf ("%d", strtonum(val)*k*m*g) }')
            if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
                echo "filesize: $filesize, kfactor: $kfactor, mfactor: $mfactor, gfactor: $gfactor"
            fi

            if [ $filesize -gt $g_size_limit ]; then 
                if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
                    echo "file too huge: $g_limit_flag"
                else
                    echo "file too huge"
                fi

                if [ $g_limit_flag -eq 1 -o $g_limit_flag -eq 3 ]; then
                    bsttool_huge_file_warning
                    g_limit_flag=$?
                fi
            
                # if not yes once or all, then nothing to do
                if [ $g_limit_flag -ne 3 -a $g_limit_flag -ne 4 ]; then 
                    # no need to download
                    echo "nothing to do"
                    continue
                fi
            fi

            if [ -f "$name" ]; then 
                echo "file exist: $name"
                if [ $g_cover_flag -eq 1 -o $g_cover_flag -eq 3 ]; then 
                    bsttool_duplicate_dir_warning
                    g_cover_flag=$?
                fi

                if [ $g_cover_flag -eq 3 -o $g_cover_flag -eq 4 ]; then 
                    if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
                        echo "remove old file before download: $g_cover_flag"
                    else
                        echo "remove old file before download"
                    fi

                    rm "$name"
                else
                    # no need to download
                    echo "nothing to do"
                    continue 
                fi
            fi

            if [ ${remote:0-1} == "/" ]; then 
                path="$remote$name"
            else
                path="$remote/$name"
            fi

            bst_tool get "$path" "$name"
        fi
    done

    return 0
}

# $1: remote path
# $2: local path (optional)
bsttool_get_all ()
{
    if [ $# -lt 1 ]; then 
        echo "Usage: bstrget remote [local]"
        return 1
    fi

    local remote=$1
    local local=""
    local type=0
    g_cover_flag=1 # no once
    local dirold=""
    if [ $# -gt 1 ]; then 
        local=$2
    else
        # get name part
        local tmp=""
        if [ ${remote:0-1} == "/" ]; then 
            # cut tailing '/'
            tmp="${remote:0:$((${#remote}-1))}"
        else
            tmp="$remote"
        fi

        local="${tmp##*/}"
    fi

    if [ -z "$local" -o "$local" == "/" ]; then 
        # default name
        local="setup"
    fi

    bsttool_query_path "$remote"
    type=$?
    case $type in
        0)
            # not exist
            echo "remote not exist"
            return 1
            ;;
        1)
            # file exist
            # do nothing, leave file to bsttool_get_recur
            ;;
        2)
            # empty dir exist
            echo "nothing to download"
            return 1
            ;;
        3)
            # dir exist
            if [ ! -d "$local" ]; then 
                mkdir -p "$local"
                if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
                    echo "create download dir $local"
                fi
            else
                bsttool_duplicate_dir_warning
                g_cover_flag=$?
                # invalid or no (all)
                if [ $g_cover_flag -eq 0 -o $g_cover_flag -eq 1 -o $g_cover_flag -eq 2 ]; then
                    return 1
                fi
            fi

            dirold="$PWD"
            cd "$local"
            ;;
        *)
            echo "should not reach here !"
            return 1
            ;;
    esac

    g_limit_flag=1 # no once
    g_size_limit=$((1024*1024)) # in bytes
    if [ ! -z "$BST_TOOL_GET_HUGE" ]; then 
        g_size_limit=$(($BST_TOOL_GET_HUGE*1024*1024))
    fi

    if [ ! -z "$BST_TOOL_VERBOSE" ]; then 
        echo "size limit: $g_size_limit"
    fi

    bsttool_get_recur "$remote" "$local" 0
    if [ ! -z "$dirold" ]; then 
        cd "$dirold"
    fi

    return 0
}

# alias
alias bstput=bsttool_replace
alias bstget=bsttool_fetch
alias bstdel='bst_tool delete'
alias bstls='bst_tool ls'
alias bstrls=bsttool_list_all
alias bstrget=bsttool_get_all
